import "./pedersen.code" as hash
import "./256bitsCond.code" as multiplex
import "hashes/sha256/512bitPadded.code" as sha512
import "ecc/edwardsCompress.code" as edwardsCompress
import "ecc/babyjubjubParams.code" as context
import "utils/binary/not.code" as NOT

// Merke-Tree inclusion proof for tree depth 8 using SNARK efficient pedersen hashes
// directionSelector=> 1/true if current digest is on the rhs of the hash
def main(field[256] rootDigest, private field[256] leafDigest, private field[8] directionSelector, field[256] PathDigest0, private field[256] PathDigest1, private field[256] PathDigest2, private field[256] PathDigest3, private field[256] PathDigest4, private field[256] PathDigest5, private field[256] PathDigest6, private field[256] PathDigest7) -> (field):
	context = context()

	//Setup
	field[256] currentDigest = leafDigest
	field counter = 1
	
	//Loop up the tree
	preimage = multiplex(directionSelector[0], currentDigest, PathDigest0)
	currentDigest = hash(preimage)
	counter = counter + 1

	preimage = multiplex(directionSelector[1], currentDigest, PathDigest1)
	currentDigest = hash(preimage)
	counter = counter + 1

	preimage = multiplex(directionSelector[2], currentDigest, PathDigest2)
	currentDigest = hash(preimage)
	counter = counter + 1

	preimage = multiplex(directionSelector[3], currentDigest, PathDigest3)
  currentDigest = hash(preimage)
  counter = counter + 1

  preimage = multiplex(directionSelector[4], currentDigest, PathDigest4)
  currentDigest = hash(preimage)
  counter = counter + 1

  preimage = multiplex(directionSelector[5], currentDigest, PathDigest5)
  currentDigest = hash(preimage)
  counter = counter + 1

  preimage = multiplex(directionSelector[6], currentDigest, PathDigest6)
  currentDigest = hash(preimage)
  counter = counter + 1

  preimage = multiplex(directionSelector[7], currentDigest, PathDigest7)
  currentDigest = sha512(preimage[0..256], preimage[256..512])
  counter = counter + 1

	//Asserts
	//TODO: is depth comparison needed?
	// counter == treeDepth
	rootDigest == currentDigest
	
	return 1 //return true in success 

